//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// 0.0.1
// Alexey Potehin <gnuplanet@gmail.com>, http://www.gnuplanet.ru/doc/cv
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include "submodule/libcore.cpp/libcore.hpp"
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// URL decode
void url_decode()
{
	int ch1, ch2;
	uint8_t r1, r2, out;


// read from stdin, convert to bin, write to stdout
	for (;;)
	{
		ch1 = getchar();
		if (ch1 == EOF) break;


		if (ch1 != '%')
		{
			out = ch1;
		}
		else
		{
			ch1 = getchar();
			if (ch1 == EOF) break;

			ch2 = getchar();
			if (ch2 == EOF) break;

			if (libcore::hex2bin((uint8_t)ch1, r1) == false) break;
			if (libcore::hex2bin((uint8_t)ch2, r2) == false) break;

			out = (uint8_t)((r1 << 4) + r2);
		}

		putchar(out);
	}
	fflush(stdout);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// URL encode
void url_encode()
{
/*
	RFC 3986 section 2.3 Unreserved Characters
	ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~
*/
	static uint8_t unreserved_table[] =
	{
//		0x00  0x01  0x02  0x03  0x04  0x05  0x06  0x07  0x08  0x09  0x0A  0x0B  0x0C  0x0D  0x0E  0x0F
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x00
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x10
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, // 0x20
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x30
		0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x40
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, // 0x50
		0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 0x60
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, // 0x70
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x80
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x90
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xA0
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xB0
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xC0
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD0
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xE0
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // 0xF0
	};


// read from stdin, convert to hex, write to stdout
	for (;;)
	{
		int ch = getchar();
		if (ch == EOF) break;

		if (unreserved_table[ch] == 0xff)
		{
			putchar(ch);
		}
		else
		{
			const char *p = libcore::bin2hex((uint8_t)ch);

			putchar('%');

			putchar(*p);
			p++;
			putchar(*p);
		}
	}
	fflush(stdout);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// general function
int main(int argc, char *argv[])
{
	bool flag_decode = false;
	bool flag_encode = false;


	if (argc == 1)
	{
		flag_decode = true;
	}
	else
	{
		if (strcmp(argv[1], "-d") == 0)
		{
			flag_decode = true;
		}

		if (strcmp(argv[1], "-e") == 0)
		{
			flag_encode = true;
		}
	}


	if (flag_decode == true)
	{
		url_decode();
		return 0;
	}


	if (flag_encode == true)
	{
		url_encode();
		return 0;
	}


	printf("%s    %s\n", PROG_FULL_NAME, PROG_URL);
	printf("example: echo \"Hello%%20world%%21\" | %s [--d]\n", argv[0]);
	printf("         echo \"Hello%%20world%%21\" | %s --e\n", argv[0]);
	printf("\n");


	return 1;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
